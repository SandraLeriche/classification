install.packages("tidyverse")
((2020-2014)/(2014-1992))*100
((2014-2020)/(2014-1992))*100
10^2+36
a=4
a
a*5
rm(list=ls())
b=c(3,4,5)
b=c(4,5,8)
sum(b)
rnorm10
rnorm(10)
rnorm(n = 5,mean = 3,sd = 1.2)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
8+5 # basic math; press ctrl/enter
1:250 # Prints numbers 1 to 100 across several lines
print("Hellow World!") # Prints "Hello World" in console
print("Hello World!") # Prints "Hello World" in console
# Variables
x <- 1:5 # Put the numbers 1-5 in the variable x
x # Displays the values in x
y <- c(6,7,8,9,10) # Puts the numbers 6-10 in y
y
a <- b <- c <- 3 #multiple assignments
x + y
x * 2 # multiplies each element in x by 2
rm(list = ls()) # clear entire workspace
library(dplyr)
library(ggplot2)
install.packages("styler")
install.packages("lintr")
library(lintr)
library(styler)
?datasets
library(help = "datasets")
data()
?airmiles
# To load a dataset from the package into the Workspace
data(airmiles) # listed as "ts" for "time-series"
force(airmiles)
str(airmiles)
# Now a dataset that has rows and columns
?anscombe
# See it's structure
str(anscombe)
anscombe
rm(list = ls()) # clean up
x1 # Prints contents of x1 in console
# Create sequential data
x1 <- 0:10 # Assigns number 0 through 10 to x1
x1 # Prints contents of x1 in console
x2 <- 10:0 # Assigns number 10 through 0 to x2
x2
x3 <- seq(10) # Counts from 1 to 10
?seq
x4 <- seq(30, 0, by = -3) # counts down by 3
# Manually enter data
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8) # Concatenate
?c
x6 <- scan() # After running this command, go to console
x6 <- scan() # After running this command, go to console
x6
ls()
?ls
rm(list = ls()) # Clean Up
setwd("~/")
trends.txt <- read.table("R/GoogleTrends.txt", header = TRUE)
trends.txt <- read.table("R/GoogleTrends.txt", header = TRUE, sep = "\t")
View(trends.txt)
trends.csv <- read.csv("R/GoogleTrends.csv", header = TRUE)
str(trends.csv)
View(trends.csv)
rm(list = ls()) # Clean Up
?UCBAdmissions
str(UCBAdmissions)
UCBAdmissions
# The problem
admit.fail <- (UCbAdmissions$Admit) # Doesn't work
# The problem
admit.fail <- (UCBAdmissions$Admit) # Doesn't work
plot(UCBAdmissions) # Does work but not what we wanted
# Get marginal frequencies from original table
margin.table(UCBAdmissions, 1) # Admit
margin.table(UCBAdmissions, 2)
margin.table(UCBAdmissions, 3)
# Get marginal frequencies from original table
margin.table(UCBAdmissions, 1) # Admit
margin.table(UCBAdmissions, 2) # Gender
margin.table(UCBAdmissions, 3) # Dept
margin.table(UCBAdmissions, 1, 2) # Admit, Gender
margin.table(UCBAdmissions)    # Total
# Save marginals as new table
admit.dept <- margin.table(UCBAdmissions, 3) # Dept
str(admit.dept)
admit.dept
barplot(admit.dept)
prop.table(admitdept) # Show as proportions
prop.table(admit.dept) # Show as proportions
round(prop.table(admit.dept), 2) #S Shows as proportions with 2 digits
round(prop.table(admit.dept), 2) * 100 # Give percentages without decimal places
# Go from table to one row per case
admit1 <- as.data.frame.table(UCBAdmissions) # Coerces to data frame
admit2 <- lapply(admit1, function(x)rep(x, admit1$freq)) # repeats each row by frequency
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq)) # repeats each row by frequency
admit3 <- as.data.frame(admit2) # Convers from list back to data frame
View(admit2)
View(admit2)
View(admit2)
View(admit2)
View(admit3)
admit4 <- admit3[, -4] # removes fifth column with frequencies
View(admit4)
View(admit4)
admit.rows <- as.data.frame(lapply(as.data.frame.table(UCBAdmissions), function(x)rep(x, as.data.frame.table(UCBAdmissions)$Freq)))[, -4]
View(admit.rows)
str(admit.rows)
admit.rows[1:10, ] # View first ten rows of data (of 4526)
rm(list = ls()) # Clean Up
#Barplot
x = c(12, 4, 21, 7, 13, 9)
barplot(x)
# R specifies color in several ways
# Color Names
# R has names for 657 colors, arranged alphabetically except for white (first)
# "Gray" or "Grey" : either is acceptable
colors() # gives list of colors
barplot(x, col = "slategray3")
# Color Numbers
# From colo name's position in alphabetically order vector of colors()
# Specify colors() [i] where i is index number in vector
barplot(x, col = colors() [102]) #darkseagreen
?col2rgb
col2rgb('navyblue') # Yields (0, 0, 128)
barplot(x, col = rgb(.54, .0, .0)) #darkred
# Using color Palettes
# Palettes can be more attractive and more informative
# Easiest to use
help(package=colorspace) # Lots of info on color spaces
?palette
# Using color Palettes
# Palettes can be more attractive and more informative
# Easiest to use
help(package=colorspace) # Lots of info on color spaces
# Built in Palettes
barplot(x, col = heat.colors(6))
barplot(terrain.colors(6))
barplot(x, col = terrain.colors(6))
rm(list = ls())
x = c(12, 3, 7, 16, 9)
barplot(x, col = terrain.colors (5))
# Create chart with 8 bars, sequential colors using R palettes
x = c(14, 3, 21, 6, 4, 16, 9, 11)
x = c(12, 3, 7, 16, 9)
# Create chart with 8 bars, sequential colors using R palettes
x1 = c(14, 3, 21, 6, 4, 16, 9, 11)
barplot(x1, col = blues9)
# 11 divergent values
require(RColorBrewer)
x <- scan(11)
x <- scan()
barplot(x, col = PRGn)
barplot(x, col = brewer.pal(11, "Dark2"))
x3 = c(12, 3, 7, 16, 9)
barplot(x, col = terrain.colors (5))
barplot(x, col = brewer.pal(11, "Dark2"))
# Brewer, 7 different values
x4 = c(12, 3, 7, 16, 9, 21, 6)
barplot(x3, col = terrain.colors (5))
barplot(x4, col = brewer.pal (7, "PuBu"))
barplot(x4, col = brewer.pal (7, "Set3"))
barplot(x, col = brewer.pal(11, "Dark2"))
barplot(x, col = brewer.pal(11, "Spectral"))
barplot(x5, col = brewer.pal (6, "GnBu"))
barplot(x5, col = brewer.pal (6, "GnBu"))
# Brewer, 6 sequential values
x5 = c(28, 15, 12, 6, 8, 9)
barplot(x5, col = brewer.pal (6, "GnBu"))
# Brewer, 9 divergent values
x6 = c(8, 4, 2, 7, 5, 1, 3, 11, 19)
barplot(x6, col = brewer.pal (9, "RdGy"))
barplot(x1, col = blues9)
barplot(x, col = brewer.pal(11, "Spectral"))
install.packages("caTools")
barplot(x1, col = blues9)
barplot(x, col = brewer.pal(11, "Spectral"))
display.brewer.all
display.brewer.all()
barplot(x5, col = brewer.pal (6, "GnBu"))
# Brewer, 9 divergent values
x6 = c(8, 4, 2, 7, 5, 1, 3, 11, 19)
barplot(x6, col = brewer.pal (9, "RdGy"))
# Brewer, 9 divergent values
x6 = c(8, 4, 2, 7, 5, 1, 3, 11, 19)
barplot(x6, col = brewer.pal (9, "PRGn"))
list = ls()
rm(list = ls())
### Data, Algorithms and Meaning - Autumn 2020 ###
### Assignment 1 - Linear Regression ###
### Objective: Prediction of December 2016 ###
# clear environment
rm(list = ls())
# Load packages
library(tidyverse)
library(lubridate)
library(hydroGOF)
# read data
transactions <- read.csv("~/R/DAM AT1/transactions.csv")
install.packages("rlang")
### Data, Algorithms and Meaning - Autumn 2020 ###
### Assignment 1 - Linear Regression ###
### Objective: Prediction of December 2016 ###
# clear environment
rm(list = ls())
# Load packages
library(tidyverse)
library(lubridate)
library(hydroGOF)
# read data
transactions <- read.csv("~/R/DAM AT1/transactions.csv")
#### Exploratory Data Analysis ####
summary(transactions)
str(transactions)
View(transactions)
### variable transformation ###
transactions$date <- as.Date(transactions$date, format = "%d/%m/%y")
transactions <- transactions %>%
mutate(year = lubridate::year(date),
month = lubridate::month(date))
View(transactions)
View(transactions)
transactions$date <- as.Date(transactions$date, format = "%d/%m/%y")
View(transactions)
View(transactions)
### Data, Algorithms and Meaning - Autumn 2020 ###
### Assignment 1 - Linear Regression ###
### Objective: Prediction of December 2016 ###
# clear environment
rm(list = ls())
# Load packages
library(tidyverse)
library(lubridate)
library(hydroGOF)
# read data
transactions <- read.csv("~/R/DAM AT1/transactions.csv")
#### Exploratory Data Analysis ####
summary(transactions)
str(transactions)
### variable transformation ###
transactions$date <- as.Date(transactions$date, format = "%d/%m/%y")
transactions <- transactions %>%
mutate(year = lubridate::year(date),
month = lubridate::month(date))
# Visual exploration of all industries and locations combination
# Sort Industry and Location to print graphs in order
transactions <- transactions %>% arrange(industry)
transactions <- transactions %>% arrange(location)
transactions[ which(transactions$industry == industry & transactions$location == location), ]
setwd("~/GitHub/classification/data")
source('~/UTS/Data, Algorithms and Meaning/AT 1/AT1B/classification_eda.R', echo=TRUE)
